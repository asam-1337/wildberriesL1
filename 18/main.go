package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

type Counter struct {
	inc uint64
}

// атомарные операции выполняются за один шаг обращения к памяти поэтому они потоко-безопасны
// возможен вариант решения с мьютексом однако этот вариант пердпочтительнее поскольку работает быстрее и нету лока отсальных горутин
func (c *Counter) Increment(delta uint64) {
	atomic.AddUint64(&c.inc, delta) // атомарно прибавляем дельту к счетчику
}

func main() {
	c := Counter{}
	wg := sync.WaitGroup{}
	wg.Add(1000)
	for i := 0; i < 1000; i++ { // создаем 1000 горутин в каждой из которой счетчик конкурентно инкрементируется 1000 раз
		go func() {
			for i := 0; i < 1000; i++ {
				c.Increment(1)
			}
			wg.Done()
		}()
	}
	wg.Wait()          // дожидаемся выполнения всех горутин
	fmt.Println(c.inc) // выводим результат счетчика
}
